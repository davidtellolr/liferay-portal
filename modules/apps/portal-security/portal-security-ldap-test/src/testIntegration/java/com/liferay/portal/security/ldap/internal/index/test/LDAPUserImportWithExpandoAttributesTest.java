/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.security.ldap.internal.index.test;

import com.liferay.arquillian.extension.junit.bridge.junit.Arquillian;
import com.liferay.expando.kernel.model.ExpandoColumn;
import com.liferay.expando.kernel.model.ExpandoColumnConstants;
import com.liferay.expando.kernel.model.ExpandoTable;
import com.liferay.expando.kernel.service.ExpandoColumnLocalService;
import com.liferay.expando.kernel.service.ExpandoTableLocalService;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.module.configuration.ConfigurationProviderUtil;
import com.liferay.portal.kernel.search.Document;
import com.liferay.portal.kernel.search.Field;
import com.liferay.portal.kernel.search.Hits;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistry;
import com.liferay.portal.kernel.search.QueryConfig;
import com.liferay.portal.kernel.search.SearchContext;
import com.liferay.portal.kernel.security.ldap.LDAPSettingsUtil;
import com.liferay.portal.kernel.service.ClassNameLocalService;
import com.liferay.portal.kernel.service.CompanyLocalServiceUtil;
import com.liferay.portal.kernel.test.rule.AggregateTestRule;
import com.liferay.portal.kernel.test.util.RandomTestUtil;
import com.liferay.portal.kernel.test.util.SearchContextTestUtil;
import com.liferay.portal.kernel.test.util.TestPropsValues;
import com.liferay.portal.kernel.util.HashMapDictionary;
import com.liferay.portal.kernel.util.Portal;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.UnicodeProperties;
import com.liferay.portal.kernel.util.UnicodePropertiesBuilder;
import com.liferay.portal.security.ldap.configuration.LDAPServerConfiguration;
import com.liferay.portal.security.ldap.constants.LDAPConstants;
import com.liferay.portal.security.ldap.constants.LegacyLDAPPropsKeys;
import com.liferay.portal.security.ldap.exportimport.LDAPUserImporter;
import com.liferay.portal.test.rule.Inject;
import com.liferay.portal.test.rule.LiferayIntegrationTestRule;
import com.liferay.portlet.expando.util.test.ExpandoTestUtil;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Dictionary;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttributes;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * @author David Tello
 */
@RunWith(Arquillian.class)
public class LDAPUserImportWithExpandoAttributesTest {

	@ClassRule
	@Rule
	public static final AggregateTestRule aggregateTestRule =
		new LiferayIntegrationTestRule();

	@BeforeClass
	public static void setUpClass() throws Exception {
		List<Company> companies = CompanyLocalServiceUtil.getCompanies();

		Company company = companies.get(0);

		_companyId = company.getCompanyId();

		_indexer = _indexerRegistry.getIndexer(User.class);

		addExpandoColumn(
			User.class, _COLUMN_NAME,
			ExpandoColumnConstants.INDEX_TYPE_KEYWORD);

		UnicodeProperties unicodeProperties = UnicodePropertiesBuilder.put(
			LDAPConstants.GROUP_MAPPINGS, ""
		).put(
			LegacyLDAPPropsKeys.LDAP_AUTH_ENABLED, "true"
		).put(
			LegacyLDAPPropsKeys.LDAP_AUTH_REQUIRED, "true"
		).put(
			LegacyLDAPPropsKeys.LDAP_EXPORT_ENABLED, "true"
		).put(
			LegacyLDAPPropsKeys.LDAP_FACTORY_INITIAL,
			"com.sun.jndi.ldap.LdapCtxFactory"
		).put(
			LegacyLDAPPropsKeys.LDAP_IMPORT_ENABLED, "true"
		).put(
			LegacyLDAPPropsKeys.LDAP_IMPORT_ON_STARTUP, "true"
		).put(
			LegacyLDAPPropsKeys.LDAP_IMPORT_USER_PASSWORD_AUTOGENERATED, "true"
		).put(
			LegacyLDAPPropsKeys.LDAP_PASSWORD_POLICY_ENABLED, "true"
		).put(
			"ldap.server.ids", "0"
		).build();

		CompanyLocalServiceUtil.updatePreferences(
			_companyId, unicodeProperties);

		Dictionary<String, Object> dictionary = new HashMapDictionary<>();

		for (Map.Entry<String, String> entry : unicodeProperties.entrySet()) {
			if (Portal.TEMP_OBFUSCATION_VALUE.equals(entry.getValue())) {
				continue;
			}

			dictionary.put(entry.getKey(), entry.getValue());
		}

		dictionary.put(LDAPConstants.GROUP_MAPPINGS, "");

		dictionary.put(
			LDAPConstants.USER_MAPPINGS,
			"emailAddress=mail,firstName=givenName,group=" +
				",jobTitle=title,lastName=" +
					"sn,password=userPassword,screenName=cn,uuid=uuid");

		dictionary.put(
			LDAPConstants.USER_CUSTOM_MAPPINGS,
			_COLUMN_NAME + "=" + _COLUMN_NAME);

		_splitStringArrays(dictionary, LDAPConstants.USER_MAPPINGS);
		_addLDAPServer(unicodeProperties, 0L);
		CompanyLocalServiceUtil.updatePreferences(
			_companyId, unicodeProperties);
		ConfigurationProviderUtil.saveCompanyConfiguration(
			LDAPServerConfiguration.class, _companyId, dictionary);
	}

	@AfterClass
	public static void tearDownClass() throws Exception {
		ConfigurationProviderUtil.deleteCompanyConfiguration(
			LDAPServerConfiguration.class, _companyId);
		deleteExpandoColumn();
	}

	@Test
	public void testVerifyUserAddExpandoAttributes() throws Exception {
		Attributes userAttributes = createUser();

		_ldapUserImporter.importUser(
			0L, _companyId, null, userAttributes, "Liferay123$");

		assertSearch(_indexer, _TEST_DEFAULT_VALUE, _TEST_DEFAULT_VALUE);
	}

	@Test
	public void testVerifyUserUpdateExpandoAttributes() throws Exception {
		Attributes userAttributes = createUser();

		_ldapUserImporter.importUser(
			0L, _companyId, null, userAttributes, "Liferay123$");

		userAttributes.put(_COLUMN_NAME, _TEST_VALUE);

		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");

		sdf.setTimeZone(TimeZone.getTimeZone("GMT"));

		userAttributes.put("modifyTimestamp", sdf.format(new Date()));

		_ldapUserImporter.importUser(
			0L, _companyId, null, userAttributes, "Liferay123$");

		assertSearch(_indexer, _TEST_VALUE, _TEST_VALUE);
	}

	protected static void addExpandoColumn(
			Class<?> clazz, String columnName, int indexType)
		throws Exception {

		ExpandoTable expandoTable = _expandoTableLocalService.fetchTable(
			TestPropsValues.getCompanyId(),
			_classNameLocalService.getClassNameId(clazz), "CUSTOM_FIELDS");

		if (expandoTable == null) {
			expandoTable = _expandoTableLocalService.addTable(
				TestPropsValues.getCompanyId(),
				_classNameLocalService.getClassNameId(clazz), "CUSTOM_FIELDS");

			_expandoTables.add(expandoTable);
		}

		ExpandoColumn expandoColumn = ExpandoTestUtil.addColumn(
			expandoTable, columnName, ExpandoColumnConstants.STRING);

		_expandoColumns.add(expandoColumn);

		UnicodeProperties unicodeProperties =
			expandoColumn.getTypeSettingsProperties();

		unicodeProperties.setProperty(
			ExpandoColumnConstants.INDEX_TYPE, String.valueOf(indexType));

		expandoColumn.setTypeSettingsProperties(unicodeProperties);

		_expandoColumnLocalService.updateExpandoColumn(expandoColumn);
	}

	protected static void deleteExpandoColumn() throws Exception {
		if (!_expandoTables.isEmpty() && (_expandoTables.get(0) != null)) {
			ExpandoTable expandoTable = _expandoTables.get(0);

			_expandoTableLocalService.deleteExpandoTable(
				expandoTable.getTableId());
		}

		ExpandoColumn expandoColumn = _expandoColumns.get(0);

		_expandoColumnLocalService.deleteExpandoColumn(
			expandoColumn.getColumnId());
	}

	protected void assertSearch(
			Indexer<?> indexer, String keywords, String... expectedColumnValues)
		throws Exception {

		SearchContext searchContext = SearchContextTestUtil.getSearchContext();

		searchContext.setKeywords(keywords);

		searchContext.setGroupIds(null);

		QueryConfig queryConfig = searchContext.getQueryConfig();

		queryConfig.addSelectedFieldNames(Field.ANY);

		Hits hits = indexer.search(searchContext);

		Assert.assertEquals(
			hits.toString(), _toString(Arrays.asList(expectedColumnValues)),
			_toString(getExpandoColumnValues(hits)));
	}

	protected Attributes createUser() {
		Attributes userAttributes = new BasicAttributes();

		userAttributes.put("uid", RandomTestUtil.randomString());
		userAttributes.put(
			"mail", RandomTestUtil.randomString() + "@liferay.com");
		userAttributes.put("givenName", RandomTestUtil.randomString());
		userAttributes.put("sn", RandomTestUtil.randomString());
		userAttributes.put("screenName", RandomTestUtil.randomString());
		userAttributes.put("cn", RandomTestUtil.randomString());
		userAttributes.put(_COLUMN_NAME, _TEST_DEFAULT_VALUE);

		return userAttributes;
	}

	protected String getExpandoColumnValue(Document document) {
		Map<String, Field> fields = document.getFields();

		for (Field field : fields.values()) {
			if (StringUtil.startsWith(field.getName(), "expando")) {
				return field.getValue();
			}
		}

		return null;
	}

	protected List<String> getExpandoColumnValues(Hits hits) {
		List<Document> documents = hits.toList();

		List<String> values = new ArrayList<>(documents.size());

		for (Document document : documents) {
			values.add(getExpandoColumnValue(document));
		}

		return values;
	}

	private static void _addLDAPServer(
		UnicodeProperties unicodeProperties, long ldapServerId) {

		String postfix = LDAPSettingsUtil.getPropertyPostfix(ldapServerId);

		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_AUTH_SEARCH_FILTER + postfix,
			"(mail=@email_address@)");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_BASE_DN + postfix,
			"dc=test,dc=liferay,dc=com");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_BASE_PROVIDER_URL + postfix,
			"ldap://liferay.com:10389");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_CONTACT_CUSTOM_MAPPINGS + postfix, "");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_CONTACT_MAPPINGS + postfix,
			"birthday=\r\ncountry=\r\n");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_GROUP_DEFAULT_OBJECT_CLASSES + postfix,
			"top,groupOfUniqueNames");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_GROUPS_DN + postfix,
			"ou=groups,dc=example,dc=com");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_GROUP_MAPPINGS + postfix,
			"description=description\ngroupName=cn\nuser=uniqueMember");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_IMPORT_GROUP_SEARCH_FILTER + postfix,
			"(objectClass=groupOfUniqueNames)");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_IMPORT_USER_SEARCH_FILTER + postfix,
			"(objectClass=inetOrgPerson)");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_SECURITY_CREDENTIALS + postfix, "secret");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_SECURITY_PRINCIPAL + postfix,
			"uid=admin,ou=system");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_SERVER_NAME + postfix, "test");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_USER_CUSTOM_MAPPINGS + postfix, "");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_USER_DEFAULT_OBJECT_CLASSES + postfix,
			"top,person,inetOrgPerson,organizationalPerson");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_USER_MAPPINGS + postfix,
			"emailAddress=mail\nfirstName=givenName\ngroup=groupMembership\n" +
				"jobTitle=title\nlastName=sn\npassword=userPassword\n" +
					"screenName=cn\nuuid=uuid\n");
		unicodeProperties.put(
			LegacyLDAPPropsKeys.LDAP_USERS_DN + postfix,
			"ou=users,dc=example,dc=com");
	}

	private static void _splitStringArrays(
		Dictionary<String, Object> dictionary, String property) {

		Object propertyValue = dictionary.get(property);

		if (propertyValue == null) {
			return;
		}

		if (propertyValue instanceof String) {
			String[] propertyValues = StringUtil.split((String)propertyValue);

			dictionary.put(property, propertyValues);
		}
	}

	private String _toString(List<String> list) {
		List<String> sorted = new ArrayList<>(list);

		Collections.sort(sorted);

		return sorted.toString();
	}

	private static final String _COLUMN_NAME = "keywordColumn";

	private static final String _TEST_DEFAULT_VALUE = "test_default_value";

	private static final String _TEST_VALUE = "test_value";

	@Inject
	private static ClassNameLocalService _classNameLocalService;

	private static long _companyId;

	@Inject
	private static ExpandoColumnLocalService _expandoColumnLocalService;

	private static final List<ExpandoColumn> _expandoColumns =
		new ArrayList<>();

	@Inject
	private static ExpandoTableLocalService _expandoTableLocalService;

	private static final List<ExpandoTable> _expandoTables = new ArrayList<>();
	private static Indexer<User> _indexer;

	@Inject
	private static IndexerRegistry _indexerRegistry;

	@Inject
	private LDAPUserImporter _ldapUserImporter;

}